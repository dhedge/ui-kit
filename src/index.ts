export { TradingWidget } from 'trading-widget/components'
export type { ProvidersProps } from 'trading-widget/providers'
export { TradingPanelProvider } from 'core-kit/index'
export {
  erc20Abi,
  AaveLendingPoolAbi,
  PoolFactoryAbi,
  PoolLogicAbi,
  PoolManagerLogicAbi,
  RewardDistributionAbi,
  EasySwapperV2Abi,
} from 'core-kit/abi'

export type { GmxMarketAsset } from 'core-kit/const'
export {
  USDC_ARBITRUM,
  arbitrum,
  base,
  optimism,
  polygon,
  SETH_OPTIMISM,
  MULTI_ASSET_TOKEN,
  PAXG_POLYGON,
  USDC_OPTIMISM,
  USDC_POLYGON,
  MANAGER_FEE_DENOMINATOR,
  LINK_OPTIMISM,
  SIMULATION_TIMEOUT_ERROR,
  MAX_GAS_LIMIT_MAP,
  GAS_LIMIT_BUFFER_COEFF,
  GAS_ESTIMATION_ERROR,
  FACTORY_ADDRESS_OPTIMISM,
  FACTORY_ADDRESS_POLYGON,
  FACTORY_ADDRESS_ARBITRUM,
  FACTORY_ADDRESS_BASE,
  DEFAULT_SIMULATION_ERROR,
  DEFAULT_ERROR_MESSAGE,
  EMPTY_POOL_CONFIG,
  DEFAULT_DEPOSIT_SLIPPAGE,
  DEFAULT_WITHDRAW_SLIPPAGE,
  DEFAULT_MULTI_ASSET_WITHDRAW_METHOD,
  DEFAULT_DEPOSIT_SLIPPAGE_SCALE,
  DEFAULT_DEPOSIT_METHOD,
  DEFAULT_PROMISE_TIMEOUT_MS,
  DEFAULT_LOCK_TIME,
  DAI_POLYGON,
  DAI_OPTIMISM,
  BRIDGED_USDC_POLYGON,
  BRIDGED_USDC_OPTIMISM,
  BRIDGED_USDC_ARBITRUM,
  CURRENCY_SYMBOL_MAP,
  contractsAddressesMap,
  contractsAbisMap,
  CBETH_BASE,
  CBBTC_BASE,
  RETH_BASE,
  BRIDGED_TOKENS_SYMBOLS,
  CHAIN_NATIVE_TOKENS,
  ALCHEMY_RPC_URL_MAP,
  CHAIN_MAP,
  AAVE_LENDING_POOL_V3_ADDRESS_POLYGON,
  AAVE_LENDING_POOL_V3_ADDRESS_OPTIMISM,
  AAVE_LENDING_POOL_V3_ADDRESS_ARBITRUM,
  AAVE_LENDING_POOL_V2_ADDRESS_POLYGON,
  MaxUint256,
  DEFAULT_PRECISION,
  AddressZero,
  DEFAULT_POLLING_INTERVAL,
  SHORTEN_POLLING_INTERVAL,
  NATIVE_TOKEN_DEPOSIT_GAS_LIMIT,
  SUSD_OPTIMISM,
  PYTH_API_LINK,
  REWARD_DISTRIBUTION_ADDRESS_OPTIMISM,
  USDC_BASE,
  USDCBC_BASE,
  USDT_OPTIMISM,
  USDT_POLYGON,
  WBTC_OPTIMISM,
  WBTC_POLYGON,
  WETH_ARBITRUM,
  WETH_BASE,
  WETH_OPTIMISM,
  WETH_POLYGON,
  WETH_BY_CHAIN_ID,
  WBTC_BY_CHAIN_ID,
  WPOL_POLYGON,
  WBTC_ARBITRUM,
  TRADING_LOG_EVENT_PARAM,
  TRADING_PANEL_LOG_EVENT,
  TBTC_OPTIMISM,
  TBTC_ARBITRUM,
  TBTC_BASE,
  TBTC_POLYGON,
  WSTETH_ARBITRUM,
  WSTETH_BASE,
  WSTETH_OPTIMISM,
  EASY_SWAPPER_V2_ADDRESS_OPTIMISM,
  EASY_SWAPPER_V2_ADDRESS_BASE,
  EASY_SWAPPER_V2_ADDRESS_ARBITRUM,
  EASY_SWAPPER_V2_ADDRESS_POLYGON,
  AAVE_LENDING_POOL_V3_ADDRESS_BASE,
  USDT_ARBITRUM,
  WSOL_ARBITRUM,
  GMX_MARKET_ASSETS,
  GMX_MARKET_ASSETS_MAP,
  WETH_MAINNET,
  USDC_MAINNET,
  USDT_MAINNET,
  WBTC_MAINNET,
} from 'core-kit/const'
export { EstimationError } from 'core-kit/models'
export type {
  ChainId,
  ChainNativeTokenMap,
  NativeTokenSymbol,
  Chain,
  Address,
  ApyCurrency,
  PoolComposition,
  Hex,
  TransactionRequest,
  CallbackConfig,
  PoolConfig,
  PricingAsset,
  PoolCompositionWithFraction,
  PoolFallbackData,
  PoolContractAccountCallParams,
  PoolContractCallParams,
  EstimateCall,
  ContractActionFunc,
  EstimatedGas,
  CallExecutionError,
  DynamicTradingToken,
  TradingToken,
  Client,
  PublicClient,
  WalletClient,
  DepositMethodName,
  PendingTransaction,
  SimulateTransactionParams,
  SimulateTransactionResponse,
  SwapEntity,
  TradingPanelAction,
  TradingPanelActionsState,
  TradingPanelState,
  TradingPanelStateModal,
  TradingPanelSetters,
  TradingPanelType,
  TradingPanelContextConfig,
  TransactionAction,
  TradingModalStatus,
  TagInvestorByReferrerCallbackVariables,
  TokenSelectorPayload,
  UpdateTransactionsArguments,
  UseProjectedEarningsResult,
  UseReferralProgramProps,
  MulticallReturnType,
  ContractFunctionReturnType,
  UseReadContractsParameters,
  UseWriteContractParameters,
  WaitForTransactionReceiptReturnType,
  SwapDataRequest,
  SwapDataResponse,
  UserPoolBalances,
  Balance,
} from 'core-kit/types'
export {
  formatNumberToLimitedDecimals,
  formatPercentage,
  formatNumeratorToPercentage,
  formatByCurrency,
  formatToUsd,
  removeInsignificantTrailingZeros,
  isZeroAddress,
  isEqualAddress,
  getContractAbiById,
  clientSide,
  commify,
  isNumeric,
  getContractAddressById,
  formatEther,
  formatUnits,
  getExplorerLink,
  getConventionalTokenPriceDecimals,
  getErrorMessage,
  isErrorWithMessage,
  toErrorWithMessage,
  getNativeTokenInvestableBalance,
  isNativeToken,
  getPercent,
  getPoolFraction,
  isBigInt,
  shortenAddress,
  normalizeNumber,
  shiftBy,
  trim,
  validateLoggerEventParams,
  decodeErrorResult,
  hexToString,
  encodeFunctionData,
  transformAddressForAnalytics,
  isFmpAirdropVaultAddress,
  formatVaultBalance,
} from 'core-kit/utils'

export {
  useInvalidatePoolContractData,
  useContractPoolComposition,
  useCheckWhitelist,
  usePoolComposition,
  usePoolFees,
  usePoolCompositionWithFraction,
  usePoolManagerLogicData,
  useManagerLogicAddress,
  usePoolTokenPrice,
  useVaultVestedPoints,
  useHasSingleAssetWithdrawBlockers,
  useUserVaultBalance,
  useUserVaultsBalances,
} from 'core-kit/hooks/pool'
export {
  usePoolDynamic,
  useUserBalancesDynamic,
  usePoolManagerDynamic,
  usePoolManagerStatic,
  usePoolStatic,
} from 'core-kit/hooks/pool/multicall'
export { useReferralProgram } from 'core-kit/hooks/referral'
export {
  useIsDepositTradingPanelType,
  useIsPoolAddress,
  useOnSimulateTransaction,
  useOnTransactionError,
  useOnTransactionEstimationError,
  useOnTransactionSuccess,
  useOnTokenSelector,
  useSetPoolAddress,
  useSetTradingType,
  useTradingPanelActions,
  useReceiveTokenInput,
  useSendTokenInput,
  useTradingPanelLogger,
  useTradingPanelModal,
  useTradingPanelPoolAddress,
  useTradingPanelPoolConfig,
  useTradingPanelPoolFallbackData,
  useTradingPanelState,
  useTradingPanelPoolConfigs,
  useTradingPanelSettings,
  useTradingPanelTransactions,
  useTradingPanelType,
  useUpdatePoolFallbackData,
  useUpdateReceiveTokenInput,
  useUpdateSendTokenInput,
  useUpdateTradingModal,
  useUpdateTradingSettings,
  useUpdatePoolConfig,
  useAddPoolConfig,
} from 'core-kit/hooks/state'
export {
  useProjectedEarningsCore,
  useExchangeRate,
  useAssetPrice,
  useDepositProjectedEarnings,
  useIsTradingEnabled,
  useRawAssetPrice,
  useTradingResultHandling,
  useTradingSettleHandler,
  useEasySwapperTrackedAssets,
} from 'core-kit/hooks/trading'
export {
  useVaultDepositTokens,
  useDepositLockTime,
} from 'core-kit/hooks/trading/deposit-v2'
export {
  useIsCompleteWithdrawStep,
  useCompleteWithdrawSwapData,
  useCompleteWithdrawTrackedAssets,
} from 'core-kit/hooks/trading/withdraw-v2/complete-step'
export {
  useIsInsufficientBalance,
  useUserTokenBalance,
  useIsDhedgeVaultConnected,
  useFlatmoneyPointsUserBalances,
} from 'core-kit/hooks/user'
export { useDebounce, useBrowserStorage } from 'core-kit/hooks/utils'
export {
  useNetwork,
  useInvalidateTradingQueries,
  useInvalidateOnBlock,
  useBlockNumber,
  useBalance,
  useAccount,
  useDisconnect,
  useConnect,
  useIsWalletConnected,
  useWalletClient,
  usePublicClient,
  useContractFunction,
  useContractReadErrorLogging,
  useContractReadsErrorLogging,
  useGasPrice,
  useReadContract,
  useReadContracts,
  useStaticCallQuery,
  useWriteContract,
  useTokenAllowance,
  useSendTransaction,
  useWaitForTransactionReceipt,
  useIsBatchContractWritesSupported,
} from 'core-kit/hooks/web3'

export type {
  ComponentProviderProps,
  ImageProps,
  ButtonProps,
} from 'trading-widget/providers/component-provider'

export type {
  ConfigProviderParams,
  ConfigProviderActions,
  ConfigProviderProps,
} from 'trading-widget/providers/config-provider'

export type {
  ThemeProviderConfigProps,
  ThemeProviderProps,
} from 'trading-widget/providers/theme-provider'

export type {
  TranslationMap,
  TranslationProviderProps,
} from 'trading-widget/providers/translation-provider'

// Limit Orders
export { LimitOrderModal, useUserLimitOrder } from 'limit-orders/index'
